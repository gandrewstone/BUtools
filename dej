#!/usr/bin/python3
import sys
import json

def main(argv):
    """dej -- DEJson picks and converts json text into individual lines
Usage:
dej [selector...] [json]
dej [selector... ] < json.txt
./jsonProducer | dej [selector...]

dej accepts a JSON document in the standard input or as the last command line 
argument.  If no selectors are specified, dej assumes the JSON is a list and 
outputs each list item on separate lines.

If selectors are specified, dej executes each selector outputing each produced 
element on its own line.

Selectors are Python code, and the json data is accessed via the variable "j".
For example: j[0], j['foo'], j['bar'][0:3]
There are a few shortcuts:

To access the nth element of the top-level list, you may simply specify the number.
That is, dej 1 5 is equivalent to dej "j[1]" "j[5]".

To access the nth element of the top-level dictionary, you may just specify the key.
Therefore dej foo is equivalent to dej "j['foo']".


Examples:

Basic selection:
$ echo "[1,2,3]" | dej "[j[0],j[2]]" "j[1]"
$ dej "[j[0],j[2]]" "j[1]" "[1,2,3]"
$ echo "[1,2,3]" | dej 0 2 1
1
3
2

Repeatedly apply a command to each selected item:
$ echo "[1,2,3]" | dej | xargs -n1 echo "you said"
you said 1
you said 2
you said 3

Select a few items and then pass them as args to a command:
$ echo "{\\"place\\":\\"world\\",\\"salu\\":\\"hello\\"}" | dej "[j['salu'],j['place']]" | xargs echo
$ echo "{\"place\":\"world\",\"salu\":\"hello\"}" | dej salu place | xargs echo
hello world

"""
    readStdin=False
    # see if last arg is json.  If not get it from stdin
    if len(argv) == 2 and "-help" in argv[1]:
        print(main.__doc__)
        return 1
    if len(argv) > 1:
        try:
            tmp = int(argv[-1])  # If the potential json is just a single number, its not json its a command
            readStdin=True
        except:
            try:
                obj = json.loads(argv[-1])
                cmdLst = argv[1:-1]
            except json.decoder.JSONDecodeError:
                readStdin=True
    else:
        readStdin=True

    if readStdin:
        cmdLst = argv[1:]
        jsText = sys.stdin.read()
        obj = json.loads(jsText)
    if len(cmdLst)==0:  # no args means just break the list into individual elements and print them
        for o in obj:
            print(o)
    else:
        for cmd in cmdLst:
            try:
                tmp = int(cmd)  # If I can cast the cmd to an integer, use it as a list index
                cmd = "j[" + cmd + "]"
            except:
                pass
            if cmd.isalnum(): # if the command is one alphanumeric word, then assume its a dictionary selector
                cmd = "j['" + cmd + "']"
            val = eval(cmd, {"j": obj })
            if type(val) is list:
                for v in val:
                    print(v)
            else:
                print (val)
    return 0

if __name__ == "__main__":
    main(sys.argv)
